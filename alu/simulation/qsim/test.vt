// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/09/2021 00:20:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] input1;
reg [31:0] input2;
reg [4:0] select;
// wires                                               
wire [31:0] output1;

// assign statements (if any)                          
test i1 (
// port map - connection between master ports and signals/registers   
	.input1(input1),
	.input2(input2),
	.output1(output1),
	.select(select)
);
initial 
begin 
#1000000 $finish;
end 
// input1[ 31 ]
initial
begin
	input1[31] = 1'b0;
end 
// input1[ 30 ]
initial
begin
	input1[30] = 1'b0;
end 
// input1[ 29 ]
initial
begin
	input1[29] = 1'b0;
end 
// input1[ 28 ]
initial
begin
	input1[28] = 1'b0;
end 
// input1[ 27 ]
initial
begin
	input1[27] = 1'b0;
end 
// input1[ 26 ]
initial
begin
	input1[26] = 1'b0;
end 
// input1[ 25 ]
initial
begin
	input1[25] = 1'b0;
end 
// input1[ 24 ]
initial
begin
	input1[24] = 1'b0;
end 
// input1[ 23 ]
initial
begin
	input1[23] = 1'b0;
end 
// input1[ 22 ]
initial
begin
	input1[22] = 1'b0;
end 
// input1[ 21 ]
initial
begin
	input1[21] = 1'b0;
end 
// input1[ 20 ]
initial
begin
	input1[20] = 1'b0;
end 
// input1[ 19 ]
initial
begin
	input1[19] = 1'b0;
end 
// input1[ 18 ]
initial
begin
	input1[18] = 1'b0;
end 
// input1[ 17 ]
initial
begin
	input1[17] = 1'b0;
end 
// input1[ 16 ]
initial
begin
	input1[16] = 1'b0;
end 
// input1[ 15 ]
initial
begin
	input1[15] = 1'b0;
end 
// input1[ 14 ]
initial
begin
	input1[14] = 1'b0;
end 
// input1[ 13 ]
initial
begin
	input1[13] = 1'b0;
end 
// input1[ 12 ]
initial
begin
	input1[12] = 1'b0;
end 
// input1[ 11 ]
initial
begin
	input1[11] = 1'b0;
end 
// input1[ 10 ]
initial
begin
	input1[10] = 1'b0;
end 
// input1[ 9 ]
initial
begin
	input1[9] = 1'b0;
end 
// input1[ 8 ]
initial
begin
	input1[8] = 1'b0;
end 
// input1[ 7 ]
initial
begin
	input1[7] = 1'b0;
end 
// input1[ 6 ]
initial
begin
	input1[6] = 1'b0;
end 
// input1[ 5 ]
initial
begin
	input1[5] = 1'b0;
end 
// input1[ 4 ]
initial
begin
	input1[4] = 1'b0;
end 
// input1[ 3 ]
initial
begin
	input1[3] = 1'b0;
end 
// input1[ 2 ]
initial
begin
	input1[2] = 1'b1;
end 
// input1[ 1 ]
initial
begin
	input1[1] = 1'b1;
end 
// input1[ 0 ]
initial
begin
	input1[0] = 1'b1;
end 
// input2[ 31 ]
initial
begin
	input2[31] = 1'b0;
end 
// input2[ 30 ]
initial
begin
	input2[30] = 1'b0;
end 
// input2[ 29 ]
initial
begin
	input2[29] = 1'b0;
end 
// input2[ 28 ]
initial
begin
	input2[28] = 1'b0;
end 
// input2[ 27 ]
initial
begin
	input2[27] = 1'b0;
end 
// input2[ 26 ]
initial
begin
	input2[26] = 1'b0;
end 
// input2[ 25 ]
initial
begin
	input2[25] = 1'b0;
end 
// input2[ 24 ]
initial
begin
	input2[24] = 1'b0;
end 
// input2[ 23 ]
initial
begin
	input2[23] = 1'b0;
end 
// input2[ 22 ]
initial
begin
	input2[22] = 1'b0;
end 
// input2[ 21 ]
initial
begin
	input2[21] = 1'b0;
end 
// input2[ 20 ]
initial
begin
	input2[20] = 1'b0;
end 
// input2[ 19 ]
initial
begin
	input2[19] = 1'b0;
end 
// input2[ 18 ]
initial
begin
	input2[18] = 1'b0;
end 
// input2[ 17 ]
initial
begin
	input2[17] = 1'b0;
end 
// input2[ 16 ]
initial
begin
	input2[16] = 1'b0;
end 
// input2[ 15 ]
initial
begin
	input2[15] = 1'b0;
end 
// input2[ 14 ]
initial
begin
	input2[14] = 1'b0;
end 
// input2[ 13 ]
initial
begin
	input2[13] = 1'b0;
end 
// input2[ 12 ]
initial
begin
	input2[12] = 1'b0;
end 
// input2[ 11 ]
initial
begin
	input2[11] = 1'b0;
end 
// input2[ 10 ]
initial
begin
	input2[10] = 1'b0;
end 
// input2[ 9 ]
initial
begin
	input2[9] = 1'b0;
end 
// input2[ 8 ]
initial
begin
	input2[8] = 1'b0;
end 
// input2[ 7 ]
initial
begin
	input2[7] = 1'b0;
end 
// input2[ 6 ]
initial
begin
	input2[6] = 1'b0;
end 
// input2[ 5 ]
initial
begin
	input2[5] = 1'b0;
end 
// input2[ 4 ]
initial
begin
	input2[4] = 1'b0;
end 
// input2[ 3 ]
initial
begin
	input2[3] = 1'b1;
end 
// input2[ 2 ]
initial
begin
	input2[2] = 1'b0;
end 
// input2[ 1 ]
initial
begin
	input2[1] = 1'b0;
end 
// input2[ 0 ]
initial
begin
	input2[0] = 1'b0;
end 
// select[ 4 ]
initial
begin
	select[4] = 1'b0;
end 
// select[ 3 ]
initial
begin
	select[3] = 1'b0;
end 
// select[ 2 ]
initial
begin
	select[2] = 1'b0;
end 
// select[ 1 ]
initial
begin
	select[1] = 1'b0;
end 
// select[ 0 ]
initial
begin
	select[0] = 1'b1;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

